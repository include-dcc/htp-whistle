// Definition: Uniform method for building Observation (and Condition) IDs associated with a patient
//
// Arguments: 
//  study - This is the full study object created by Whistler
//  participantid - The id assocaited with patient (this isn't likely to be an actual FHIR id)
//  visit_name - The name associated with the observation's visit
//  varname - The variable name associated with the observation (bmi, height, etc)

def BuildObservationId(study, participantid, visit_name, varname) {
    $this (if $IsNotNil(varname)): $StrCat(study.id, ".", participantid, ".", visit_name, ".", varname);
}



// Definition: Construct basic Observation whose response is a code from a local vocabulary (i.e. categorial value)
//
// Arguments:
//  study - This is the full study object created by Whistler
//  questionnaire - This is the entire JSON representation of the IHQ form
//  qcode - The code/question id associated with the observation 
//  qvalue - list of checkbox objects. Each should have the following fields
//     - code Is the code associated with the checkbox's definition
//     - value is the response provided. This is likely "1" or missing
//  
def BasicObservation(study, encounter, varname, value, units) {
    var subject_id: encounter.participantid;
    var varcode: HarmonizeMapped(varname, "encounter");
    var unitcode: HarmonizeMappedFirst(units, "units");

    meta.tag[]: StudyMeta(study);
    
    identifier[]: Key_Identifier(study, "Observation", BuildObservationId(study, subject_id, encounter.event_name, varname));
    subject: Reference_Key_Identifier(study, "Patient", subject_id);
    focus[].identifier: Key_Identifier(study, "ObservationDefinition", DdVariableId(study.id, "encounter", varname));
    code.text: HarmonizedLocalDisplay(varname, "encounter");
    code.coding[]: varcode;
    code.coding[]: LocalCodeSystemReference(study.id, "encounter", varname);
    if (value ~= "NA") {
        valueQuantity.value (if value?): $ParseFloat(value);
        if (unitcode?) {
            valueQuantity.unit: units;
            valueQuantity.system: unitcode.system;
            valueQuantity.code: unitcode.code;
        }
    } else {
        valueString: value;
    }
    encounter: Reference_Key_Identifier(study, "Encounter", BuildEncounterId(study, subject_id, encounter.event_name));

    status: "final";
    resourceType: "Observation";
}

def VariableObservation(study, condition, tablename, varname, value) {
    var subject_id: condition.participantid;
    var coding: ValueCodeableConcept(study.id, tablename, varname, value, value);

    meta.tag[]: StudyMeta(study);
    
    identifier[]: Key_Identifier(study, "Observation", BuildObservationId(study, subject_id, tablename, $StrCat(varname, "-", $StrJoin(".", $StrSplit(value, " ")))));
    subject: Reference_Key_Identifier(study, "Patient", subject_id);
    focus[].identifier: Key_Identifier(study, "ObservationDefinition", DdVariableId(study.id, tablename, varname));
    code.text: HarmonizedLocalDisplay(varname, tablename);
    code.coding[]: HarmonizeMapped(varname, tablename);
    code.coding[]: LocalCodeSystemReference(study.id, tablename, varname);
    valueCodeableConcept.text: value;
    valueCodeableConcept.coding[]: coding;
    status: "final";
    resourceType: "Observation";
}

