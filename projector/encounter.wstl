// Create an encounter for each survey so that we have a way to 
// clearly identify the subject's age at survey

// Age at survey is probably the main reason for this to be here, 
// but we can also utilize the survey's date



def Encounter(study, encounter) {
    var subject_id: encounter.participantid;

    meta.tag[]: StudyMeta(study);

    identifier[]: Key_Identifier(study, "Encounter", BuildEncounterId(study, subject_id, encounter.event_name));
    identifier[0].use: "official";
    class.code: "FLD";
    class.display: "field";
    class.system: "http://terminology.hl7.org/CodeSystem/v3-ActCode";
    subject: Reference_Key_Identifier(study, "Patient", subject_id);

    if (encounter.age_at_visit_d?) {
        period._start.extension[0]: AgeAtExtension(study, subject_id, encounter.age_at_visit_d, "days");
    }
    status: "finished";

    resourceType: "Encounter";
}



// Description: Wrapper for generating ResearchSubject records
//
// Arguments:
//  study - This is the full study object created by Whistler
//  demo - Must have a participantid
// 
def ProcessEncounter(study, encounter) {
    out encounter: NumericObservationParticipant(study, encounter, "encounter", "Age_at_visit", encounter.age_at_visit);
    out encounter: NumericObservationParticipant(study, encounter, "encounter", "Age at visit (d)", encounter.age_at_visit_d);
    out encounter: Encounter(study, encounter);
    out measurement: VitalSign(study, encounter, "BMI", encounter.bmi, "kg/m2");
    out measurement: VitalSign(study, encounter, "Weight_kg", encounter.weight_kg, "kg");
    out measurement: VitalSign(study, encounter, "Height_cm", encounter.height_cm, "cm");
}