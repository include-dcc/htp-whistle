// Create an encounter for each survey so that we have a way to 
// clearly identify the subject's age at survey

// Age at survey is probably the main reason for this to be here, 
// but we can also utilize the survey's date
def BuildEncounterId(study, participantid, event_name) {
    $this : $StrCat(study.id, ".", participantid, ".", event_name);
}

def AgeAtExtension(study, subject, age, age_unit) {
    if (age_unit = "years"){
        url: "http://hl7.org/fhir/StructureDefinition/cqf-relativeDateTime";
        extension[0].url: "target";
        extension[0].valueReference: subject;
        extension[1].url: "targetPath";
        extension[1].valueString: "birthDate";
        extension[2].url: "relationship";
        extension[2].valueCode: "after";
        extension[3].url: "offset";
        extension[3].valueDuration.value: $ParseInt(age);
        //extension[3].valueDuration.unit: "a";
        extension[3].valueDuration.system: "http://unitsofmeasure.org";
        extension[3].valueDuration.code: "a";
        //extension[3].display: "years";
    }
    if (age_unit = "days"){
        var days: $ParseFloat(age);
        
        url: "http://hl7.org/fhir/StructureDefinition/cqf-relativeDateTime";
        extension[0].url: "target";
        extension[0].valueReference: subject;
        extension[1].url: "targetPath";
        extension[1].valueString: "birthDate";
        extension[2].url: "relationship";
        extension[2].valueCode: "after";
        extension[3].url: "offset";
        extension[3].valueDuration.value: days;
        extension[3].valueDuration.unit: "d";
        extension[3].valueDuration.system: "http://unitsofmeasure.org";
        extension[3].valueDuration.code: "days";
        //extension[3].display: "days";
    }
}

def Encounter(study, encounter) {
    var subject_id: encounter.participantid;

    meta.tag[]: StudyMeta(study);

    identifier[]: Key_Identifier(study, "Encounter", BuildEncounterId(study, subject_id, encounter.event_name));
    identifier[0].use: "official";
    class.code: "FLD";
    class.display: "field";
    class.system: "http://terminology.hl7.org/CodeSystem/v3-ActCode";
    subject: Reference_Key_Identifier(study, "Patient", subject_id);

    if (encounter.age_at_visit_d?) {
        period._start.extension[0]: AgeAtExtension(study, subject, encounter.age_at_visit_d, "days");
    }
    status: "finished";

    resourceType: "Encounter";
}

// Definition: Construct basic Observation whose response is a code from a local vocabulary (i.e. categorial value)
//
// Arguments:
//  study - This is the full study object created by Whistler
//  questionnaire - This is the entire JSON representation of the IHQ form
//  qcode - The code/question id associated with the observation 
//  qvalue - list of checkbox objects. Each should have the following fields
//     - code Is the code associated with the checkbox's definition
//     - value is the response provided. This is likely "1" or missing
//  
def VitalSign(study, encounter, varname, value, units) {
    var subject_id: encounter.participantid;
    var varcode: HarmonizeMapped(varname, "encounter");
    var unitcode: HarmonizeMappedFirst(units, "units");

    meta.tag[]: StudyMeta(study);

    category[0].coding[0].system: "http://terminology.hl7.org/CodeSystem/observation-category";
    category[0].coding[0].code: "vital-signs";
    category[0].coding[0].display: "Vital Signs";

    identifier[]: Key_Identifier(study, "Observation", BuildObservationId(study, subject_id, encounter.event_name, varname));
    identifier[0].use: "official";
    subject: Reference_Key_Identifier(study, "Patient", subject_id);
    focus[].identifier: Key_Identifier(study, "ObservationDefinition", DdVariableId(study.id, "encounter", varname));
    code.text: HarmonizedLocalDisplay(varname, "encounter");
    code.coding[]: varcode;
    code.coding[]: LocalCodeSystemReference(study.id, "encounter", varname);
    if (value ~= "NA") {
        valueQuantity.value (if value ): $ParseFloat(value);
        valueQuantity.unit: units;
        valueQuantity.system: unitcode.system;
        valueQuantity.code: unitcode.code;
    } else {
        valueString: value;
    }
    encounter: Reference_Key_Identifier(study, "Encounter", BuildEncounterId(study, subject_id, encounter.event_name));

    if (encounter.age_at_visit_d?) {
        _effectiveDateTime.extension[0]: AgeAtExtension(study, subject, encounter.age_at_visit_d, "days");
    }

    status: "final";
    resourceType: "Observation";
}

def NumericObservationParticipant(study, fhir_resource, tablename, varname, numvalue) {
    if (numvalue?) {
        var value: $ParseFloat(numvalue);

        if (value?) {
            meta.tag[]: StudyMeta(study);
            var subject_id: fhir_resource.participantid;
            var varcode: HarmonizeMapped(varname, tablename);
            var varident: $StrCat(study.id, ".", subject_id, ".", fhir_resource.event_name, ".", varname);

            identifier[]: Key_Identifier(study, "Observation", BuildObservationId(study, subject_id, tablename, varident));
            identifier[0].use: "official";

            subject: Reference_Key_Identifier(study, "Patient", subject_id);
            focus[].identifier: Key_Identifier(study, "ObservationDefinition", DdVariableId(study.id, tablename, varname));
            code.text: HarmonizedLocalDisplay(varname, tablename);
            code.coding[]: varcode;
            code.coding[]: LocalCodeSystemReference(study.id, tablename, varname);
            valueQuantity.value: value;

            encounter: Reference_Key_Identifier(study, "Encounter", BuildEncounterId(study, subject_id, fhir_resource.event_name));

            status: "final";
            resourceType: "Observation";
        }
    }
}

// Description: Wrapper for generating ResearchSubject records
//
// Arguments:
//  study - This is the full study object created by Whistler
//  demo - Must have a participantid
// 
def ProcessEncounter(study, encounter) {
    out encounter: NumericObservationParticipant(study, encounter, "encounter", "Age_at_visit", encounter.age_at_visit);
    out encounter: NumericObservationParticipant(study, encounter, "encounter", "Age at visit (d)", encounter.age_at_visit_d);
    out encounter: Encounter(study, encounter);
    out measurement: VitalSign(study, encounter, "BMI", encounter.bmi, "kg/m2");
    out measurement: VitalSign(study, encounter, "Weight_kg", encounter.weight_kg, "kg");
    out measurement: VitalSign(study, encounter, "Height_cm", encounter.height_cm, "cm");
}