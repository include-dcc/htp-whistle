// Participant

// We create both a Patient record as well as a basic ResearchSubject here for each
// subject specified

// I'm not seeing any specimen details in the data I have at the moment

// Description: Research Subject 
//
// Arguments:
//  study - This is the full study object created by Whistler
//  subject - Must have a participantid
def ResearchSubject(study, subject) {
    meta.tag[]: StudyMeta(study);
    identifier[]: Key_Identifier(study, "ResearchSubject", subject.participantid);
    status: "on-study";
    study: Reference_Key_Identifier(study, "ResearchStudy", study.id);
    individual: Reference_Key_Identifier(study, "Patient", subject.participantid);
    resourceType: "ResearchSubject";
}

// Description: Our Participant is basically a limited Patient record
//
// Arguments:
//  study - This is the full study object created by Whistler
//  subject - Must have a participantid
// 
def Participant(study, subject) {
    meta.tag[]: StudyMeta(study);
    identifier[]: Key_Identifier(study, "Patient", subject.participantid);
    gender (if subject.sex ~= "."): HarmonizeAsCode(subject.sex, "gender");
    extension[]: RaceExtension(subject);
    extension[]: EthnicityExtension(subject);
    resourceType : "Patient"
}


def TraitObservation(study, subject, varname, value, tablename) {
    var subject_id: subject.participantid;

    meta.tag[]: StudyMeta(study);

    identifier[]: Key_Identifier(study, "Observation", $StrCat(study.id, ".", subject_id, ".", varname));
    subject: Reference_Key_Identifier(study, "Patient", subject_id);
    focus[].identifier: Key_Identifier(study, "ObservationDefinition", DdVariableId(study.id, tablename, varname));
    code.text: HarmonizedLocalDisplay(varname, tablename);
    code.coding[]: HarmonizeMapped(varname, tablename);
    code.coding[]: LocalCodeSystemReference(study.id, tablename, varname);

    valueCodeableConcept.coding[]: HarmonizeMapped(value, $ToLower(varname));
    valueCodeableConcept.text: value;
    
    status: "final";
    resourceType: "Observation";

}

// Definition: Construct basic Observation whose response is a code from a local vocabulary (i.e. categorial value)
//
// Arguments:
//  study - This is the full study object created by Whistler
//  questionnaire - This is the entire JSON representation of the IHQ form
//  qcode - The code/question id associated with the observation 
//  qvalue - list of checkbox objects. Each should have the following fields
//     - code Is the code associated with the checkbox's definition
//     - value is the response provided. This is likely "1" or missing
//  
def StringObservationParticipant(study, fhir_resource, tablename, varname, value) {
    var subject_id: fhir_resource.participant;
    var varcode: HarmonizeMapped(varname, tablename);

    meta.tag[]: StudyMeta(study);
    
    identifier[]: Key_Identifier(study, "Observation", BuildObservationId(study, subject_id, tablename, varname));
    subject: Reference_Key_Identifier(study, "Patient", subject_id);
    focus[].identifier: Key_Identifier(study, "ObservationDefinition", DdVariableId(study.id, tablename, varname));
    code.text: HarmonizedLocalDisplay(varname, tablename);
    code.coding[]: varcode;
    code.coding[]: LocalCodeSystemReference(study.id, tablename, varname);
    valueString: value;
    
    status: "final";
    resourceType: "Observation";
}

// Description: Wrapper for generating Patient records
//
// Arguments:
//  study - This is the full study object created by Whistler
//  demo - Must have a participantid
// 
def ProcessParticipant(study, demo) {
    out patient: VariableObservation(study, demo, "participant", "MRAbstractionStatus", demo.mrabstractionstatus);
    out patient: Participant(study, demo);

    out observation: TraitObservation(study, demo, "Sex", demo.sex, "participant");
    out observation: TraitObservation(study, demo, "Race", demo.race, "participant");
    out observation: TraitObservation(study, demo, "Ethnicity", demo.ethnicity, "participant");
}

// Description: Wrapper for generating ResearchSubject records
//
// Arguments:
//  study - This is the full study object created by Whistler
//  demo - Must have a participantid
// 
def ProcessResearchSubject(study, demo) {
    out research_study: ResearchSubject(study, demo);
}
