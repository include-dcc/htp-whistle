// Specimen use the standard FHIR Specimen resource with a few potential specialized 
// interpretations of the standard properties:
//   * parent - If the specimen type is derived from another, the "parent" specimen is referenced here
//   * processing[x].additive - References to the appropriate Substance associated with the preservation_method
//   * aliquots are stored inside the .container array
//
def ProcessSpecimen(study, specimen, all_aliquots, participants) {
    // We may not get subject id or it's name will change. This is based on 
    // RJC example but the final dataset may look very different.
    //var subject_id: $SubStr(specimen.lab_id, 0, 7);
    var subject_id: specimen.subject_id;

    var matching_subject: participants[where $.participantid=subject_id];
    if ($ListLen(matching_subject) > 0) {
        var aliquots: all_aliquots[where $.sample_id=specimen.sample_id];
        
        meta.tag[]: StudyMeta(study);
        
        // add labID to identifier as separate entry???
        identifier[0]: Key_Identifier(study, "Specimen", BuildSpecimenIdentifier(study, subject_id, specimen.sample_id));
        identifier[0].use: "official";
        
        if (specimen.parent_sample_id?) {
            parent[] (if specimen.parent_sample_id ~= specimen.sample_id): Reference_Key_Identifier(study, "Specimen", BuildSpecimenIdentifier(study, subject_id, specimen.parent_sample_id));
        }

        // Do we actually want to consider the volume inside "vial volume"
        if (specimen.in_out = "In") {
            status: "available";
        } else {
            status: "unavailable";
        }

        var substance_code: HarmonizeMapped(specimen.preservation_method, "SpecimenAdditive");
        if (substance_code?) {
            processing[0].additive[0]: Reference_Key_Identifier(study, "Substance", BuildSubstanceIdentifier(study, specimen.preservation_method));
        }

        processing[0].description: specimen.laboratory_procedure;
        condition[0].coding[]: HarmonizeMapped(specimen.preservation_method, "SpecimenCondition");
        condition[0].text: specimen.preservation_method;

        type.coding[]: HarmonizeMapped(specimen.sample_type, "sample_type");
        type.text: specimen.sample_type

        // No consistency...ever
        collection._collectedDateTime.extension[0] (if specimen.age_at_collection ~= "NA" and specimen.age_at_collection ~= "#N/A"): AgeAtExtension(study, subject_id, specimen.age_at_collection, "days");
        container[]: ProcessAliquot(study, subject_id, aliquots[]);

        subject: Reference_Key_Identifier(study, "Patient", subject_id);
        resourceType: "Specimen";    
    }
}

def ProcessSpecimenData(study, all_specimen, all_aliquots, participants) {
    out specimen: ProcessSpecimen(study, all_specimen[], all_aliquots[*], participants[*]);
}