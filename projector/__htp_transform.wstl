// Master controller for all of HTP
// This file assumes the presence of the "active_modules" entry from NCPI Whister which can be used to turn on/off different modules to avoid recompiling resources that aren't currently needed. 

// 
def TestActiveModule(modules, module_value, required resource) {
    if (~modules or modules.ALL=true) {
        $this: true;
    }
    if (module_value? and module_value=true) {
        $this: true;
    }

}
// Transform the ds-connect dataset 
def Transform_HTP_Dataset(resource) {
    if (resource.study?) {
        $this (if resource.code-systems?): ProcessCodeSystem(resource.study, resource.code-systems[]);
        $this (if resource.study.data-dictionary?): ProcessDatasetDefinitions(resource.study, resource.study.data-dictionary[]);
    }
    if resource.participant? {
        $this: ProcessParticipant(resource.study, resource.participant[]);
        $this: ProcessGroup(resource.study, resource.participant[*]);
        $this: ProcessStudy(resource.study);
        $this: ProcessResearchSubject(resource.study, resource.participant[]);

        var familyids: $Unique(resource.participant[*].familyid);
        $this: ProcessFamilyGroups(resource.study, resource.participant[*], familyids[]);
    }        
    if resource.encounter? {
        $this: ProcessEncounter(resource.study, resource.encounter[]);
    }
    if resource.condition? {
        $this: ProcessCondition(resource.study, resource.condition[]);
    }
    if resource.ds_condition? {
        $this: ProcessDsCondition(resource.study, resource.ds_condition[]);
    }

    if resource.additive? {
        $this: ProcessSubstanceData(resource.study, resource.additive[]);
    }

    // Filter out specimen without actual participants
    if resource.specimen2? {
        var emptylist: [];
        $this: ProcessSpecimenData(resource.study, resource.specimen2[*], emptylist[*], resource.participant[*]);
    }

    if resource.specimen? {
        $this: ProcessSpecimenData(resource.study, resource.specimen[*], resource.aliquot[*], resource.participant[*]);
    }

    if resource.harmony? {
        $this: ProcessDDHarmony(resource.study, resource.harmony[]);
    }

    if resource.kf-manifests? {
        $this: ProcessKfManifestData(resource.study, resource.kf-manifests[*]);
    }

    if resource.kf-omics? {
        $this: ProcessKfManifestData(resource.study, resource.kf-omics[*]);
    }

    if resource.kf-manifest-rna? {
        $this: ProcessKfManifestData(resource.study, resource.kf-manifest-rna[*])
    }
    
    if resource.file_manifests? {
        $this: ProcessKfManifestData()
    }

}
